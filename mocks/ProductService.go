// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	products "github.com/wisdommatt/ecommerce-microservice-product-service/internal/products"
)

// ProductService is an autogenerated mock type for the ProductService type
type ProductService struct {
	mock.Mock
}

// AddProduct provides a mock function with given fields: ctx, jwtToken, newProduct
func (_m *ProductService) AddProduct(ctx context.Context, jwtToken string, newProduct *products.Product) (*products.Product, error) {
	ret := _m.Called(ctx, jwtToken, newProduct)

	var r0 *products.Product
	if rf, ok := ret.Get(0).(func(context.Context, string, *products.Product) *products.Product); ok {
		r0 = rf(ctx, jwtToken, newProduct)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *products.Product) error); ok {
		r1 = rf(ctx, jwtToken, newProduct)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields: ctx, sku
func (_m *ProductService) GetProduct(ctx context.Context, sku string) (*products.Product, error) {
	ret := _m.Called(ctx, sku)

	var r0 *products.Product
	if rf, ok := ret.Get(0).(func(context.Context, string) *products.Product); ok {
		r0 = rf(ctx, sku)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sku)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
